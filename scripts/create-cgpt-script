#!/bin/bash

# Function to show usage information
usage() {
    echo "Usage: $0 <script_name> [description]"
    echo "Creates a bash script using cgpt."
    echo ""
    echo "Arguments:"
    echo "  <script_name>  Name of the script to create (required)"
    echo "  [description]  Description of the script's functionality (optional)"
}

# Function to handle errors
error_exit() {
    echo "Error: $1" >&2
    exit 1
}

# Function to dynamically fetch cgpt usage information
get_cgpt_usage() {
    cgpt -h 2>&1 || error_exit "Failed to fetch cgpt usage information"
}

# Function to generate the prompt for cgpt
generate_prompt() {
    local script_name="$1"
    local description="$2"
    local cgpt_usage
    cgpt_usage=$(get_cgpt_usage)

    cat <<EOF
Create a bash script named '$script_name' that does the following:

$description

Requirements:
1. The script should be written in bash.
2. Make the script clean, concise, and compliant with shellcheck.
3. Include helpful comments to explain the script's functionality.
4. Start the script with the appropriate shebang line.
5. Include error handling and usage information.
6. Implement the following features:
   - Dynamically fetch and include the latest cgpt usage information using:
     $cgpt_usage
   - Use <thinking> tags to show the AI's reasoning process during script generation.
7. Ensure that these features (cgpt usage and <thinking> tags) are transitively included in any scripts generated by this script.

Output ONLY the script content, starting with the shebang line, without any markdown, explanations, or surrounding text.
EOF
}

# Function to generate the script using cgpt
generate_script() {
    local prompt
    prompt=$(generate_prompt "$1" "$2")
    cgpt -t 300 "$prompt" || error_exit "Failed to generate script using cgpt"
}

# Function to post-process and clean the generated script
post_process_script() {
    local script="$1"
    # Remove any potential markdown formatting or explanatory text
    echo "$script" | sed -n '/^#!/,$p' | sed '/^```/d'
}

# Main execution
if [ $# -lt 1 ]; then
    usage
    exit 1
fi

script_name="$1"
description="${2:-A bash script}"

# Generate and process the script
generated_script=$(generate_script "$script_name" "$description")
clean_script=$(post_process_script "$generated_script")

# Write the clean script to a file
echo "$clean_script" > "$script_name" || error_exit "Failed to write script to file"

# Make the new script executable
chmod +x "$script_name" || error_exit "Failed to make script executable"

echo "Script '$script_name' has been created and made executable."
