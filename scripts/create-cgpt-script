#!/bin/bash

set -e

trap 'echo "Error: Script execution failed" >&2; exit 1' ERR

get_cgpt_usage() {
    cgpt -h 2>&1
}

get_cgpt_advanced_examples() {
    cgpt --show-advanced-usage all 2>&1
}

read_or_generate_usage_examples() {
    local script_name="$1"
    local examples_file="${script_name}-usage-examples.txt"
    
    if [[ -f "$examples_file" ]]; then
        cat "$examples_file"
    else
        cgpt -i "Generate 3-5 usage examples for a script named $script_name" \
             -s "You are an expert in creating clear and concise usage examples for command-line tools. Provide 3-5 practical examples of how to use the $script_name script. Each example should be on a new line and start with a # comment explaining its purpose."
    fi
}

handle_extra_context() {
    local context=""
    for arg in "$@"; do
        if [[ -f "$arg" ]]; then
            context+="File contents of $arg:\n$(cat "$arg")\n\n"
        else
            context+="Additional context: $arg\n\n"
        fi
    done
    echo "$context"
}

fetch_dynamic_context() {
    local context="$1"
    echo "$(eval "$context")"
}

call_external_program() {
    local command="$1"
    echo "$(eval "$command")"
}

generate_script() {
    local script_name="$1"
    local description="$2"
    local extra_context="$3"
    local cgpt_usage="$(get_cgpt_usage)"
    local cgpt_advanced_examples="$(get_cgpt_advanced_examples)"
    local usage_examples="$(read_or_generate_usage_examples "$script_name")"

    local prompt="Create a bash script named '$script_name' that does the following:

$description

Requirements:
1. Start with the appropriate shebang (#!/bin/bash)
2. Be clean, concise, and compliant with shellcheck
3. Include helpful comments
4. Use error handling (set -e and trap)
5. Use <thinking> and <scratchpad> tags to show your reasoning process
6. Include functions to fetch cgpt usage information and advanced examples
7. Include a function to read usage examples from a file, or generate them if the file doesn't exist
8. Ensure these features (cgpt usage, advanced examples, usage examples, tags) are propagated to any scripts it might generate
9. If applicable, read its own usage examples from a file named '${script_name}-usage-examples.txt'
10. Include functions for fetch_dynamic_context and call_external_program to allow runtime context fetching and external program execution

Current cgpt usage:
<cgpt_usage>
$cgpt_usage
</cgpt_usage>

Advanced cgpt examples:
<cgpt_advanced_examples>
$cgpt_advanced_examples
</cgpt_advanced_examples>

Usage examples:
<usage_examples>
$usage_examples
</usage_examples>

Extra context:
$extra_context

Output only the script content within <generated_script> tags, without any surrounding text or markdown.
Preserve all indentation and formatting in your output."

    local raw_output_file=$(mktemp)
    cgpt -i "$prompt" -t 4000 > "$raw_output_file"

    local extracted_script=$(sed -n "/<generated_script>/,/<\/generated_script>/p" "$raw_output_file" | sed "s/.*<generated_script>//;s/<\/generated_script>.*//;/^$/d")

    if [[ -z "$extracted_script" ]]; then
        echo "Error: Failed to extract script content from cgpt output" >&2
        exit 1
    fi

    echo "$extracted_script"
    rm "$raw_output_file"
}

main() {
    if [[ $# -lt 1 ]]; then
        echo "Usage: $0 <script_name> [<script_description>] [extra context...]" >&2
        exit 1
    fi

    local script_name="$1"
    local description="${2:-}"
    shift 2

    local extra_context=""
    if [[ $# -gt 0 ]]; then
        extra_context=$(handle_extra_context "$@")
    fi

    echo "• Generating script: $script_name..." >&2

    local script_content=$(generate_script "$script_name" "$description" "$extra_context")
    echo "$script_content" > "$script_name"
    chmod +x "$script_name"

    echo "• Script $script_name has been created and made executable." >&2
}

main "$@"
